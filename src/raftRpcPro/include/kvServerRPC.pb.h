// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvServerRPC.proto

#ifndef PROTOBUF_INCLUDED_kvServerRPC_2eproto
#define PROTOBUF_INCLUDED_kvServerRPC_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kvServerRPC_2eproto 

namespace protobuf_kvServerRPC_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kvServerRPC_2eproto
namespace raftKVRpcProctoc {
class GetArgs;
class GetArgsDefaultTypeInternal;
extern GetArgsDefaultTypeInternal _GetArgs_default_instance_;
class GetReply;
class GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class PutAppendArgs;
class PutAppendArgsDefaultTypeInternal;
extern PutAppendArgsDefaultTypeInternal _PutAppendArgs_default_instance_;
class PutAppendReply;
class PutAppendReplyDefaultTypeInternal;
extern PutAppendReplyDefaultTypeInternal _PutAppendReply_default_instance_;
}  // namespace raftKVRpcProctoc
namespace google {
namespace protobuf {
template<> ::raftKVRpcProctoc::GetArgs* Arena::CreateMaybeMessage<::raftKVRpcProctoc::GetArgs>(Arena*);
template<> ::raftKVRpcProctoc::GetReply* Arena::CreateMaybeMessage<::raftKVRpcProctoc::GetReply>(Arena*);
template<> ::raftKVRpcProctoc::PutAppendArgs* Arena::CreateMaybeMessage<::raftKVRpcProctoc::PutAppendArgs>(Arena*);
template<> ::raftKVRpcProctoc::PutAppendReply* Arena::CreateMaybeMessage<::raftKVRpcProctoc::PutAppendReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace raftKVRpcProctoc {

// ===================================================================

class GetArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.GetArgs) */ {
 public:
  GetArgs();
  virtual ~GetArgs();

  GetArgs(const GetArgs& from);

  inline GetArgs& operator=(const GetArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetArgs(GetArgs&& from) noexcept
    : GetArgs() {
    *this = ::std::move(from);
  }

  inline GetArgs& operator=(GetArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetArgs* internal_default_instance() {
    return reinterpret_cast<const GetArgs*>(
               &_GetArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetArgs* other);
  friend void swap(GetArgs& a, GetArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetArgs* New() const final {
    return CreateMaybeMessage<GetArgs>(NULL);
  }

  GetArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetArgs& from);
  void MergeFrom(const GetArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes ClientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // int32 RequestId = 3;
  void clear_requestid();
  static const int kRequestIdFieldNumber = 3;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.GetArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::int32 requestid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvServerRPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.GetReply) */ {
 public:
  GetReply();
  virtual ~GetReply();

  GetReply(const GetReply& from);

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(GetReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetReply* other);
  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetReply* New() const final {
    return CreateMaybeMessage<GetReply>(NULL);
  }

  GetReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetReply& from);
  void MergeFrom(const GetReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const void* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // bytes Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.GetReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvServerRPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutAppendArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.PutAppendArgs) */ {
 public:
  PutAppendArgs();
  virtual ~PutAppendArgs();

  PutAppendArgs(const PutAppendArgs& from);

  inline PutAppendArgs& operator=(const PutAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutAppendArgs(PutAppendArgs&& from) noexcept
    : PutAppendArgs() {
    *this = ::std::move(from);
  }

  inline PutAppendArgs& operator=(PutAppendArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutAppendArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutAppendArgs* internal_default_instance() {
    return reinterpret_cast<const PutAppendArgs*>(
               &_PutAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PutAppendArgs* other);
  friend void swap(PutAppendArgs& a, PutAppendArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutAppendArgs* New() const final {
    return CreateMaybeMessage<PutAppendArgs>(NULL);
  }

  PutAppendArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutAppendArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutAppendArgs& from);
  void MergeFrom(const PutAppendArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutAppendArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes Op = 3;
  void clear_op();
  static const int kOpFieldNumber = 3;
  const ::std::string& op() const;
  void set_op(const ::std::string& value);
  #if LANG_CXX11
  void set_op(::std::string&& value);
  #endif
  void set_op(const char* value);
  void set_op(const void* value, size_t size);
  ::std::string* mutable_op();
  ::std::string* release_op();
  void set_allocated_op(::std::string* op);

  // bytes ClientId = 4;
  void clear_clientid();
  static const int kClientIdFieldNumber = 4;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // int32 RequestId = 5;
  void clear_requestid();
  static const int kRequestIdFieldNumber = 5;
  ::google::protobuf::int32 requestid() const;
  void set_requestid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.PutAppendArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr op_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::int32 requestid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvServerRPC_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutAppendReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.PutAppendReply) */ {
 public:
  PutAppendReply();
  virtual ~PutAppendReply();

  PutAppendReply(const PutAppendReply& from);

  inline PutAppendReply& operator=(const PutAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutAppendReply(PutAppendReply&& from) noexcept
    : PutAppendReply() {
    *this = ::std::move(from);
  }

  inline PutAppendReply& operator=(PutAppendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutAppendReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutAppendReply* internal_default_instance() {
    return reinterpret_cast<const PutAppendReply*>(
               &_PutAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PutAppendReply* other);
  friend void swap(PutAppendReply& a, PutAppendReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutAppendReply* New() const final {
    return CreateMaybeMessage<PutAppendReply>(NULL);
  }

  PutAppendReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutAppendReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutAppendReply& from);
  void MergeFrom(const PutAppendReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutAppendReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const void* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.PutAppendReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kvServerRPC_2eproto::TableStruct;
};
// ===================================================================

class kvServerRpc_Stub;

class kvServerRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline kvServerRpc() {};
 public:
  virtual ~kvServerRpc();

  typedef kvServerRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void PutAppend(::google::protobuf::RpcController* controller,
                       const ::raftKVRpcProctoc::PutAppendArgs* request,
                       ::raftKVRpcProctoc::PutAppendReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::raftKVRpcProctoc::GetArgs* request,
                       ::raftKVRpcProctoc::GetReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(kvServerRpc);
};

class kvServerRpc_Stub : public kvServerRpc {
 public:
  kvServerRpc_Stub(::google::protobuf::RpcChannel* channel);
  kvServerRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~kvServerRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements kvServerRpc ------------------------------------------

  void PutAppend(::google::protobuf::RpcController* controller,
                       const ::raftKVRpcProctoc::PutAppendArgs* request,
                       ::raftKVRpcProctoc::PutAppendReply* response,
                       ::google::protobuf::Closure* done);
  void Get(::google::protobuf::RpcController* controller,
                       const ::raftKVRpcProctoc::GetArgs* request,
                       ::raftKVRpcProctoc::GetReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(kvServerRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetArgs

// bytes Key = 1;
inline void GetArgs::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetArgs::key() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.Key)
  return key_.GetNoArena();
}
inline void GetArgs::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.Key)
}
#if LANG_CXX11
inline void GetArgs::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetArgs.Key)
}
#endif
inline void GetArgs::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetArgs.Key)
}
inline void GetArgs::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetArgs.Key)
}
inline ::std::string* GetArgs::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetArgs.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetArgs::release_key() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetArgs.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetArgs::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetArgs.Key)
}

// bytes ClientId = 2;
inline void GetArgs::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetArgs::clientid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.ClientId)
  return clientid_.GetNoArena();
}
inline void GetArgs::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.ClientId)
}
#if LANG_CXX11
inline void GetArgs::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetArgs.ClientId)
}
#endif
inline void GetArgs::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetArgs.ClientId)
}
inline void GetArgs::set_clientid(const void* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetArgs.ClientId)
}
inline ::std::string* GetArgs::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetArgs.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetArgs::release_clientid() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetArgs.ClientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetArgs::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetArgs.ClientId)
}

// int32 RequestId = 3;
inline void GetArgs::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 GetArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.RequestId)
  return requestid_;
}
inline void GetArgs::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.RequestId)
}

// -------------------------------------------------------------------

// GetReply

// bytes Err = 1;
inline void GetReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetReply::err() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetReply.Err)
  return err_.GetNoArena();
}
inline void GetReply::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetReply.Err)
}
#if LANG_CXX11
inline void GetReply::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetReply.Err)
}
#endif
inline void GetReply::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetReply.Err)
}
inline void GetReply::set_err(const void* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetReply.Err)
}
inline ::std::string* GetReply::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetReply.Err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetReply::release_err() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetReply.Err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetReply.Err)
}

// bytes Value = 2;
inline void GetReply::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetReply::value() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetReply.Value)
  return value_.GetNoArena();
}
inline void GetReply::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetReply.Value)
}
#if LANG_CXX11
inline void GetReply::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetReply.Value)
}
#endif
inline void GetReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetReply.Value)
}
inline void GetReply::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetReply.Value)
}
inline ::std::string* GetReply::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetReply.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetReply::release_value() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetReply.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetReply::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetReply.Value)
}

// -------------------------------------------------------------------

// PutAppendArgs

// bytes Key = 1;
inline void PutAppendArgs::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutAppendArgs::key() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Key)
  return key_.GetNoArena();
}
inline void PutAppendArgs::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Key)
}
#if LANG_CXX11
inline void PutAppendArgs::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.Key)
}
#endif
inline void PutAppendArgs::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline void PutAppendArgs::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline ::std::string* PutAppendArgs::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutAppendArgs::release_key() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutAppendArgs::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Key)
}

// bytes Value = 2;
inline void PutAppendArgs::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutAppendArgs::value() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Value)
  return value_.GetNoArena();
}
inline void PutAppendArgs::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Value)
}
#if LANG_CXX11
inline void PutAppendArgs::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.Value)
}
#endif
inline void PutAppendArgs::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline void PutAppendArgs::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline ::std::string* PutAppendArgs::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutAppendArgs::release_value() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutAppendArgs::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Value)
}

// bytes Op = 3;
inline void PutAppendArgs::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutAppendArgs::op() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Op)
  return op_.GetNoArena();
}
inline void PutAppendArgs::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Op)
}
#if LANG_CXX11
inline void PutAppendArgs::set_op(::std::string&& value) {
  
  op_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.Op)
}
#endif
inline void PutAppendArgs::set_op(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline void PutAppendArgs::set_op(const void* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline ::std::string* PutAppendArgs::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutAppendArgs::release_op() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Op)
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutAppendArgs::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Op)
}

// bytes ClientId = 4;
inline void PutAppendArgs::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutAppendArgs::clientid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return clientid_.GetNoArena();
}
inline void PutAppendArgs::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
#if LANG_CXX11
inline void PutAppendArgs::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
#endif
inline void PutAppendArgs::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline void PutAppendArgs::set_clientid(const void* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline ::std::string* PutAppendArgs::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutAppendArgs::release_clientid() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.ClientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutAppendArgs::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.ClientId)
}

// int32 RequestId = 5;
inline void PutAppendArgs::clear_requestid() {
  requestid_ = 0;
}
inline ::google::protobuf::int32 PutAppendArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.RequestId)
  return requestid_;
}
inline void PutAppendArgs::set_requestid(::google::protobuf::int32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.RequestId)
}

// -------------------------------------------------------------------

// PutAppendReply

// bytes Err = 1;
inline void PutAppendReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutAppendReply::err() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendReply.Err)
  return err_.GetNoArena();
}
inline void PutAppendReply::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendReply.Err)
}
#if LANG_CXX11
inline void PutAppendReply::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendReply.Err)
}
#endif
inline void PutAppendReply::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendReply.Err)
}
inline void PutAppendReply::set_err(const void* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendReply.Err)
}
inline ::std::string* PutAppendReply::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendReply.Err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutAppendReply::release_err() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendReply.Err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutAppendReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendReply.Err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftKVRpcProctoc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kvServerRPC_2eproto
